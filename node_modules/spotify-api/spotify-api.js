const logger = require('logger');
const pConfig = require('../../private/config-private');
const SpotifyApiNode = require('spotify-web-api-node');

module.exports = SpotifyApi;

function SpotifyApi(userRefreshToken) {
    this.refreshToken = userRefreshToken;
    this.accessToken;
    this.tokenExpiresAt;
    this.api;
};

SpotifyApi.prototype.initialize = function () {
    let self = this;
    return this.getSpotifyApi(this.refreshToken)
        .then((api) => {
            self.api = api;
            return;
        });
};

SpotifyApi.prototype.getSpotifyApi = function (userToken) {
    let api = new SpotifyApiNode({
        clientId: pConfig.spotify.clientId,
        clientSecret: pConfig.spotify.clientSecret
    });
    return this.setAccessToken(api, userToken)
        .then(() => {
            return api;
        });
};

SpotifyApi.prototype.setAccessToken = function (api, refreshToken) {
    if (!refreshToken) {
        logger.debug('using client credentials grant type');
        return api.clientCredentialsGrant()
            .then((data) => {
                this.setToken(api, data.body);
            });
    }
    logger.debug('using bearer grant type');
    api.setRefreshToken(refreshToken);
    return api.refreshAccessToken()
        .then((data) => {
            this.setToken(api, data.body);
        });
};

SpotifyApi.prototype.setToken = function (api, tokenBody) {
    this.setTokenExpires(tokenBody.expires_in);
    this.accessToken = tokenBody.access_token;
    if (api) // object not declared yet
        api.setAccessToken(this.accessToken);
    else
        this.api.setAccessToken(this.accessToken);
};

SpotifyApi.prototype.getAccessToken = function () {
    let currTime = new Date();
    if (this.tokenExpiresAt < currTime) {
        logger.info('resetting token');
        return this.setAccessToken(this.api, this.refreshToken);
    }
};

SpotifyApi.prototype.getServerTokenApi = function () {
    let api = new SpotifyApiNode({
        clientId: pConfig.spotify.clientId,
        clientSecret: pConfig.spotify.clientSecret
    });
    return api.clientCredentialsGrant()
        .then((data) => {
            this.setTokenExpires(data.body.expires_in);
            this.accessToken = data.body['access_token'];
            api.setAccessToken(this.accessToken);
        })
};

SpotifyApi.prototype.setTokenExpires = function (expiresIn) {
    let currTime = new Date();
    this.tokenExpiresAt = new Date(currTime.getTime() + expiresIn);
};