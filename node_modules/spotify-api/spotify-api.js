const logger = require('logger');
const pConfig = require('../../private/config-private');
const SpotifyApiNode = require('spotify-web-api-node');

module.exports = SpotifyApi;

function SpotifyApi(userRefreshToken) {
    this.refreshToken = userRefreshToken;
    this.accessToken;
    this.tokenExpiresAt;
    this.api; // reference of SpotifyApiNode object on init()
};

SpotifyApi.prototype.initialize = function () {
    logger.debug('initializing api object');
    let self = this;
    return this.getSpotifyApi(this.refreshToken)
        .then((api) => {
            self.api = api;
            return;
        });
};

SpotifyApi.prototype.getSpotifyApi = function (userToken) {
    let api = new SpotifyApiNode({
        clientId: pConfig.spotify.clientId,
        clientSecret: pConfig.spotify.clientSecret
    });
    return this.setAccessToken(api, userToken)
        .then(() => {
            return api;
        });
};

SpotifyApi.prototype.setAccessToken = function (api, refreshToken) {
    if (!refreshToken) {
        logger.debug('using client credentials grant type');
        return api.clientCredentialsGrant()
            .then((data) => {
                this.setToken(api, data.body);
            });
    }
    logger.debug('using bearer grant type');
    api.setRefreshToken(refreshToken);
    return api.refreshAccessToken()
        .then((data) => {
            this.setToken(api, data.body);
        });
};

SpotifyApi.prototype.setToken = function (api, tokenBody) {
    this.setTokenExpires(tokenBody.expires_in);
    this.accessToken = tokenBody.access_token;
    if (api) // object not declared yet
        api.setAccessToken(this.accessToken);
    else
        this.api.setAccessToken(this.accessToken);
};

SpotifyApi.prototype.getAccessToken = function () {
    let currTime = new Date();
    if (this.tokenExpiresAt < currTime) {
        logger.info('resetting token');
        return this.setAccessToken(this.api, this.refreshToken);
    }
};

SpotifyApi.prototype.getServerTokenApi = function () {
    let api = new SpotifyApiNode({
        clientId: pConfig.spotify.clientId,
        clientSecret: pConfig.spotify.clientSecret
    });
    return api.clientCredentialsGrant()
        .then((data) => {
            this.setTokenExpires(data.body.expires_in);
            this.accessToken = data.body['access_token'];
            api.setAccessToken(this.accessToken);
        });
};

SpotifyApi.prototype.setTokenExpires = function (expiresIn) {
    let currTime = new Date();
    this.tokenExpiresAt = new Date(currTime.getTime() + expiresIn);
};

SpotifyApi.prototype.getArtistNewRelease = function (artistId) {
    logger.info('getting most recent release for: ' + artistId);
    return this.initialize()
        .then(() => this.getRecentRelease(artistId))
};

SpotifyApi.prototype.getRecentRelease = function (artistId) {
    return this.validateInit()
        .then(() => this.getArtistAlbums(artistId))
        .then((albums) => {
            return this.sortAlbumsByRelease(albums)
        })
        .then((sortedAlbums) => {
            if (sortedAlbums.length > 0) {
                let album = sortedAlbums[0]
                return {
                    spotify_id: album.artists[0].id,
                    recent_release: {
                        id: album.id,
                        uri: album.uri,
                        title: album.name,
                        release_date: album.release_date,
                        images: album.images,
                        url: album.external_urls.spotify
                    }
                };
            }

            return {
                spotify_id: artistId,
                recent_release: {
                    title: 'No releases currently on Spotify',
                    release_date: '-'
                }
            };
        });
};

SpotifyApi.prototype.getArtistAlbums = function (artistId) {
    logger.debug('getting artist albums');
    let promises = [];
    let albumType = 'album,single';
    return this.validateInit()
        .then(() => this.api.getArtistAlbums(artistId, {
            album_type: albumType
        }))
        .then((data) => {
            return data.body.total;
        })
        .then((total) => {
            logger.debug('artist albums found with total: ' + total);
            for (let offset = 0; offset < total; offset += 50) {
                promises.push(this.api.getArtistAlbums(artistId, {
                    limit: 50,
                    offset: offset,
                    album_type: albumType
                }));
            }
        })
        .then(() => Promise.all(promises))
        .then((queryResults) => {
            let albums = [];
            logger.debug('concatting query results with length: ' + queryResults.length);
            for (let i = 0; i < queryResults.length; i++) {
                albums = albums.concat(queryResults[i].body.items);
            }
            return albums;
        });
};

SpotifyApi.prototype.sortAlbumsByRelease = function (albums) {
    return albums.sort((a, b) => {
        let aDate = new Date(a.release_date);
        let bDate = new Date(b.release_date);
        if (aDate < bDate)
            return 1;
        if (bDate < aDate)
            return -1;
        return 0;
    });
}

SpotifyApi.prototype.validateInit = function () {
    return new Promise((resolve, reject) => {
        if (!this.api) {
            return reject(new Error('Spotify API object has not been initialized. Has initialize() been called?'));
        }
        resolve();
    });
}