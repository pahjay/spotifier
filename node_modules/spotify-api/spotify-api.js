const logger = require('logger');
const SpotifyApiNode = require('spotify-web-api-node');


function SpotifyApi(userRefreshToken) {
    this.refreshToken = userRefreshToken;
    this.initializeApi()
        .then(() => logger.debug('api object initialized'));
}

/**
 * initialize api object
 */
SpotifyApi.prototype.initializeApi = () => {
    let self = this;
    self.getSpotifyApi(self.refreshToken)
        .then((api) => {
            self.api = api;
        });
};

/**
 * get a spotify api wrapper object 
 */
SpotifyApi.prototype.getSpotifyApi = (userToken) => {
    if (userToken)
        return this.getUserTokenApi(userToken);
    
    return this.getServerTokenApi();
};

/**
 * Get a spotify api wrapper object using user's token
 * @param {string} userToken - User's refresh token
 */
SpotifyApi.prototype.getUserTokenApi = (userToken) => {
    let api = new SpotifyApiNode();
    return this.setAccessToken(api, userToken)
        .then(() => {
            return api;
        });
};

/**
 * set the access token for specified spotify object
 * @param {*} api - spotify wrapper object
 * @param {*} refreshToken - user's refresh token used for spotify authorization
 */
SpotifyApi.prototype.setAccessToken = (api, refreshToken) => {
    api.setRefreshToken(refreshToken);
    return api.refreshAccesstoken()
        .then((data) => {
            api.setAccessToken(data.body['access_token']);
        });
};

/**
 * get a spotify api wrapper object using server token
 */
SpotifyApi.prototype.getServerTokenApi = () => {

};
