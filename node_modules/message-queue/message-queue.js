const RSMQPromise = require('rsmq-promise');
const logger = require('logger');
const messages = require('./message-formats.json');

const ARTIST_DETAILS = 'artist-details';
const ARTIST_DETAILS_QUEUE = 'artist-details-job';
const ARTIST_DETAILS_RESPONSE_Q = 'artist-details-job-response';
const SYNC_LIBRARY_QUEUE = 'sync-library-job';
const SYNC_LIBRARY_RESPONSE_Q = 'sync-library-job-response';
const LIBRARY_SYNC = 'library-sync';
const queues = [ARTIST_DETAILS_QUEUE, ARTIST_DETAILS_RESPONSE_Q, SYNC_LIBRARY_QUEUE, SYNC_LIBRARY_RESPONSE_Q];

// connect 
const rsmq = new RSMQPromise({  
    host: "127.0.0.1",
    port: 6379
}); 
 
setupQueues(); // initialize

let MessageQueue = {
    createArtistDetailsJob: (artistId, token) => {
        let message = messages[ARTIST_DETAILS];
        message.token = token;
        message.artist_id = artistId;
        let msgStr = JSON.stringify(message);
        logger.info(JSON.stringify(message));
        return rsmq.sendMessage({qname: ARTIST_DETAILS_QUEUE, message: msgStr})
            .then((res) => {
                logger.info(JSON.stringify(res)
            )});
    }, 

    consumeArtistDetailsJob: () => {
        return rsmq.receiveMessage({qname: ARTIST_DETAILS_QUEUE})
            .then((job) => {
                let message = JSON.parse(job.message);
                return message;
            });
    },

    createLibrarySyncJob: () => {
        // TODO
    },
  
    createScanJob: () => {
        // TODO
    }
};

function setupQueues() {
    queues.forEach((queue) => {
        logger.info('creating ' + queue + ' if not already exists.');
        rsmq.createQueue({
                qname: queue
            })
            .then((done) => {
                // nada
            })
            .catch((err) => {
                if (err.toString().toLowerCase().indexOf('queue exists') == -1)
                    logger.error(err);
            });
    });
};


module.exports = MessageQueue;